<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.2.xsd
		">

    <description>Spring Configuration</description>

    <bean id="placeholderConfig"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:application.properties</value>
        </property>
    </bean>
    
    <bean id="dataSourceTarget" class="org.apache.commons.dbcp.BasicDataSource">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driver}" />

        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    <bean id="dataSource" class="com.p6spy.engine.spy.P6DataSource">
        <constructor-arg>
            <ref local="dataSourceTarget" />
        </constructor-arg>
    </bean>
    <!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。 -->
    <context:component-scan
        base-package="com.activemq.jpa"><!-- base-package 如果多个，用“,”分隔 -->
        <context:exclude-filter type="annotation"
            expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 配置 JPA Entity Manager -->
    <bean id="entityManagerFactory"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
        <property name="packagesToScan"
            value="com.activemq.jpa" /><!-- 
            如果多个，用“,”分隔 -->
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory
                </prop>
                <!-- <prop key="net.sf.ehcache.configurationResourceName">cache/ehcache-hibernate-local.xml</prop> -->
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy
                </prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.search.default.directory_provider">filesystem</prop>
                <prop key="hibernate.search.default.indexBase">${hibernate.search.default.indexBase}
                </prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            </props>
        </property>
    </bean>

    <!-- 指定JPA实现厂商适配器 -->
    <bean id="hibernateJpaVendorAdapter"
        class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />

    <!-- 配置 Spring Data JPA， base-package 如果多个，用“,”分隔 -->
    <jpa:repositories base-package="com.activemq.jpa"
        transaction-manager-ref="transactionManager"
        entity-manager-factory-ref="entityManagerFactory" />

    <!-- 配置 JPA Transaction -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <!-- 配置 Annotation 驱动，定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"
        proxy-target-class="true" />
        
    <!-- active mq -->
    <!-- 1.配置destroy-method="destory" connectionFactory targetConnectionFactory org.apache.activemq.pool.PooledConnectionFactoryorg.springframework.jms.connection.CachingConnectionFactory -->  
    <bean id="jmsFactory" class="org.springframework.jms.connection.CachingConnectionFactory" >  
        <property name="targetConnectionFactory">  
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">  
                <property name="brokerURL">  
                    <value>tcp://localhost:10086</value>  
                </property> 
                <property name="useAsyncSend" value="true" />   
            </bean>  
        </property>  
        <property name="clientId" value="clientId_001"/>
        <property name="sessionCacheSize" value="10" />
    </bean>  
    <!-- 2.定义消息目标 -->  
    <bean id="destination" class="org.apache.activemq.command.ActiveMQTopic">  
        <constructor-arg value="topic_sql"></constructor-arg>  
    </bean>  
    <!-- 消息转换 -->  
    <bean id="messageConverter" class="com.lumanmed.activemq.core.convert.JmsConvert" />
    <!-- 3.配置Spring JMS Template -->  
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">  
        <!-- 3.1 注入jmsFactory -->  
        <property name="connectionFactory" ref="jmsFactory" />  
        <!-- 3.2 配置消息目标 -->  
        <property name="defaultDestination" ref="destination" />  
        <!-- 订阅发布模式 -->  
        <property name="pubSubDomain" value="true" />
        <property name="receiveTimeout" value="10000" />
        <property name="messageConverter" ref="messageConverter" />
    </bean>  
    <!-- 4.配置生产者 -->  
    <bean id="jmsPublisher" class="com.lumanmed.activemq.core.impl.PublisherServiceImpl">  
        <property name="jmsTemplate" ref="jmsTemplate"/> 
        <property name="destination" ref="destination"/>  
    </bean>  
    <!-- 消息消费者配置 （自己定义）-->  
    <bean id="jmsInvoker" class="com.activemq.jpa.service.JmsInvokerService" />
    <bean id="jmsSubscriber" class="com.lumanmed.activemq.core.impl.SubscriberServiceImpl">
    	<property name="jmsInvoker" ref="jmsInvoker"/> 
    </bean>  
    <!-- 消息监听器 -->  
    <bean id="jmsListenerAdapter"  
        class="org.springframework.jms.listener.adapter.MessageListenerAdapter">  
        <constructor-arg ref="jmsSubscriber" />
        <property name="defaultListenerMethod" value="reciveMessage" />  
        <!-- 消息转换 -->  
        <property name="messageConverter" ref="messageConverter" />
    </bean>  
  
    <!-- 消息监听容器 -->  
   <bean id="jmsListenerContainer"  
        class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
        <property name="connectionFactory" ref="jmsFactory" />  
        <property name="pubSubDomain" value="true"/>  
        <property name="subscriptionDurable" value="true"/>
        <property name="receiveTimeout" value="10000"/>
        <property name="clientId" value="clientId_001"/>
        <property name="destination" ref="destination" />  
        <property name="messageListener" ref="jmsListenerAdapter" />
        <property name="concurrency" value="4-8"/>
    </bean>
</beans>